{"version":3,"sources":["Components/ChooseMonth.js","Components/Calendar.js","Components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["ChooseMonth","_ref","changeMonth","react_default","a","createElement","onClick","type","value","className","Calendar","items","showModal","map","item","index","key","day","todos","Modal","eventValue","changeValue","addEvent","cancelAdding","placeholder","autoFocus","onChange","event","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createCalendar","date","firstday","Date","getFullYear","getMonth","lastday","daysThisMonth","i","getDate","push","month","getDay","unshift","id","setState","setDays","days","addToDays","state","daysWithEvents","button","target","currentDay","isShowModal","currentCell","textContent","copy","forEach","prevState","concat","toConsumableArray","monthdays","eventdays","events","filter","el","Components_ChooseMonth","Components_Calendar","Components_Modal","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc81c975.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst ChooseMonth = ({ changeMonth }) => (\r\n    <div onClick={changeMonth}>\r\n        <button type=\"button\" value=\"prev\" className=\"btn btn--prev\" >prev</button>\r\n        <button type=\"button\" value=\"now\" className=\"btn btn--now\" >today</button>\r\n        <button type=\"button\" value=\"next\" className=\"btn btn--next\">></button>\r\n    </div>\r\n\r\n);\r\n\r\nexport default ChooseMonth;","import React from 'react';\r\n\r\n\r\nconst Calendar = ({ items, showModal }) => (\r\n\r\n    <div className=\"calendar\" onClick={showModal}>\r\n        <div className=\"calendar__day\">ПН</div>\r\n        <div className=\"calendar__day\">ВТ</div>\r\n        <div className=\"calendar__day\">СР</div>\r\n        <div className=\"calendar__day\">ЧТ</div>\r\n        <div className=\"calendar__day\">ПТ</div>\r\n        <div className=\"calendar__day\">СБ</div>\r\n        <div className=\"calendar__day\">ВС</div>\r\n\r\n        {items.map((item, index) => (\r\n            <div className=\"calendar__day\" key={index}>\r\n                {item.day}\r\n                <br />{item.todos}\r\n            </div>\r\n        ))}\r\n    </div>\r\n);\r\n\r\n\r\nexport default Calendar;","import React from 'react';\r\n\r\n\r\nconst Modal = ({ eventValue, changeValue, addEvent, cancelAdding }) => (\r\n    <div className=\"modal\">\r\n        <h2>Add event?</h2>\r\n        <input placeholder=\"add event\" autoFocus={true} onChange={changeValue} event={eventValue}></input>\r\n        <div>\r\n            <button type=\"button\" onClick={addEvent}>add</button>\r\n            <button type=\"button\" onClick={cancelAdding}>cancel</button>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Modal;","import React from 'react';\r\nimport './App.css';\r\nimport ChooseMonth from './Components/ChooseMonth'\r\nimport Calendar from './Components/Calendar'\r\nimport Modal from './Components/Modal'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentDay: new Date(),\r\n      month: '',\r\n      currentCell: '',\r\n      days: [],\r\n      isShowModal: false,\r\n      eventValue: '',\r\n      daysWithEvents: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.createCalendar(this.state.currentDay)\r\n  }\r\n\r\n  createCalendar = (date) => {\r\n    let firstday = new Date(date.getFullYear(), date.getMonth());\r\n    let lastday = new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n    let daysThisMonth = [];\r\n\r\n    for (let i = 1; i <= lastday.getDate(); i++) {\r\n      daysThisMonth.push({ day: i, month: date.getMonth() + 1 })\r\n    }\r\n    if (firstday.getDay() === 0) {\r\n      for (let i = 0; i < 6; i++) {\r\n        daysThisMonth.unshift({ id: '' })\r\n      }\r\n    }\r\n    if (firstday.getDay() > 1) {\r\n      for (let i = 0; i < firstday.getDay() - 1; i++) {\r\n        daysThisMonth.unshift({ id: '' })\r\n      }\r\n    }\r\n    if (lastday.getDay() !== 0) {\r\n      for (let i = 0; i < 7 - lastday.getDay(); i++) {\r\n        daysThisMonth.push({ id: '' })\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      month: date.getMonth() + 1\r\n    }, () => { this.setDays(daysThisMonth) })\r\n  }\r\n\r\n  setDays = (daysThisMonth) => {\r\n    this.setState({\r\n      days: this.addToDays(daysThisMonth, this.state.daysWithEvents)\r\n    })\r\n  }\r\n\r\n  changeMonth = (event) => {\r\n    let button = event.target.value;\r\n    let day = this.state.currentDay;\r\n    let firstday;\r\n    if (button === 'prev') {\r\n      firstday = new Date(day.getFullYear(), day.getMonth() - 1)\r\n    } else if (button === 'next') {\r\n      firstday = new Date(day.getFullYear(), day.getMonth() + 1)\r\n    } else if (button === 'now') {\r\n      firstday = new Date();\r\n    }\r\n    this.setState({\r\n      currentDay: firstday,\r\n    }, () => { this.createCalendar(this.state.currentDay) })\r\n  }\r\n\r\n  showModal = (event) => {\r\n    this.setState({\r\n      isShowModal: true,\r\n      currentCell: event.target.textContent\r\n    })\r\n  }\r\n\r\n  changeValue = (event) => {\r\n    this.setState({ eventValue: event.target.value });\r\n  }\r\n\r\n  addEvent = () => {\r\n    let copy = this.state.days;\r\n    copy.forEach(item => {\r\n      if (item.day == this.state.currentCell) {\r\n        item.todos = this.state.eventValue;\r\n        this.setState(prevState => ({\r\n          daysWithEvents: [...prevState.daysWithEvents, item]\r\n        }))\r\n      }\r\n    });\r\n    this.setState({\r\n      days: copy,\r\n      isShowModal: false\r\n    });\r\n  }\r\n\r\n  cancelAdding = () => {\r\n    this.setState({\r\n      isShowModal: false\r\n    })\r\n  }\r\n\r\n  addToDays = (monthdays, eventdays) => {\r\n    let events = eventdays.filter(item =>\r\n      item.month === this.state.month\r\n    )\r\n    let showDays = monthdays.map(el => {\r\n      events.forEach(item => {\r\n        if (el.day === item.day) {\r\n          el = item;\r\n        }\r\n      })\r\n      return el;\r\n    })\r\n    return showDays;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\" >\r\n        <header className=\"header\">\r\n          <h1>The calendar</h1>\r\n          <h2>{this.state.month}</h2>\r\n          <ChooseMonth changeMonth={this.changeMonth} />\r\n        </header>\r\n        <Calendar items={this.state.days} showModal={this.showModal} />\r\n        {this.state.isShowModal &&\r\n          <Modal\r\n            eventValue={this.state.eventValue}\r\n            changeValue={this.changeValue}\r\n            addEvent={this.addEvent}\r\n            cancelAdding={this.cancelAdding}\r\n          />}\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}